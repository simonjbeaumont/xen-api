#!/usr/bin/env python

import os
import sys
import XenAPI

magic_oc_key = "sctx-1928"


def usage():
    print """Usage: %s [-h|--help]
          <src-pool-master> <src-username> <src-password>
          <dst-pool-master> <dst-usernanme> <dst-password>
          """ % os.path.basename(__file__)


def confirm(message):
    answer = raw_input(message + " [y/N] ")
    if answer and answer[0].lower() != "y":
        print "Exiting: no changes made."
        sys.exit(1)


def login_to_host(host, username, password):
    print "Creating XenAPI session on %s" % host
    session = XenAPI.Session("https://" + host)
    session.xenapi.login_with_password(username, password)
    return session


def main(src, dst):
    src_nets = src.xenapi.network.get_all_records()
    src_net_names = set([src_nets[x]["name_label"] for x in src_nets])
    dst_nets = dst.xenapi.network.get_all_records()
    dst_net_names = set([dst_nets[x]["name_label"] for x in dst_nets])
    net_names_to_create = list(src_net_names - dst_net_names)
    if not net_names_to_create:
        print "All networks on source pool already exist on destination pool."
        print "Exiting: nothing to do."
        sys.exit()
    confirm("This will create the following networks on the destination pool:\n"
            + "\t%s\n" % (net_names_to_create)
            + "Do you wish to continue?")
    desc = ("This network was autogenerated by missing_sxm_networks_create.py;"
            + " all networks of this nature can be safely removed either by"
            + " hand or using missing_sxm_networks_cleanup.py")
    for net_name in net_names_to_create:
        print "Creating network named '%s' on destination pool..." % net_name
        new_net = {"name_label": net_name,
                   "name_description": desc,
                   "other_config": {magic_oc_key: "yes"}}
        dst.xenapi.network.create(new_net)
    print "Finished: Created %d networks." % len(net_names_to_create)


if __name__ == "__main__":
    args = sys.argv[1:]
    if "-h" in args or "--help" in args:
        usage()
        sys.exit()
    try:
        src_master, src_user, src_pass, dst_master, dst_user, dst_pass = args
        src_session = login_to_host(src_master, src_user, src_pass)
        dst_session = login_to_host(dst_master, dst_user, dst_pass)
        main(src_session, dst_session)
    except ValueError:
        usage()
        sys.exit(2)
    except XenAPI.Failure as e:
        print "Failed to create XenAPI session on host: %s" % e
        sys.exit(1)
